---

- iri: https://w3id.org/unpublished/yamlpyowl/basic-feature-ontology#

- import:
    iri: http://purl.obolibrary.org/obo/bfo.owl#
    annotations:
        download_link: http://purl.obolibrary.org/obo/bfo/2.0/bfo.owl#
    localpath: bfo.owl
    ns: bfo

- annotation: >
    This ontology per se does not aim to have a relevant meaning. It serves as a place to apply certain language
    features of yamlos such that theses features can be evaluated by unittests. utc_global_annotation

- annotation: A second annotation. utc_global_annotation

- multiple_owl_classes:
    - Class1:
        # Note: utc_ means unit test comment; The tests will assure that this string is present
        SubClassOf: "owl:Thing"
        annotations: "This is a single annotation. Will be converted to a len-1 list. utc_annotation"
    - Class2:
        SubClassOf: "owl:Thing"
        annotations:
            - annotation1
            - annotation2
            - annotation3
            - |
              annotation 4
              spans several
              lines (yaml-multiline string)
    - Class3:
        # SubClassOf: owl:Thing # bfo:entity
        SubClassOf: bfo:BFO_0000001
    - Class4:
        # SubClassOf: owl:Thing # bfo:entity
        labels:
            - First label
            - Second label
            - |
              Third label
              spanning
              several lines

    - Class5:
        SubClassOf: Class4
        __create_proxy_individual: recursive
        # should have a proxy individual
    - Class5a:
        # should have a proxy individual
        SubClassOf: Class5
    - Class5b:
        SubClassOf: Class5
        # should have a proxy individual
    - Class5b1:
        SubClassOf: Class5b
        # should have a proxy individual
    - Class5a1:
        SubClassOf: Class5a
        __create_proxy_individual: False
        # should not have a proxy individual
    - Class5a2:
        SubClassOf: Class5a1
        # should not have a proxy individual

- owl_data_property:
    has_demo_function_value:
                Domain: Class1
                Range: int

- owl_object_property:
    has_demo_property_value:
        Domain: Class4
        Range: Class2
        Characteristics:
            - Functional

- owl_object_property:
    has_demo_property_value2:
        Domain: Class4
        Range: Class2
        Characteristics:
            - Functional

- multiple_owl_classes:
    - Class6:
        SubClassOf: Class1
        EquivalentTo: Class2
    - Class7:
        SubClassOf: Class1
        EquivalentTo:
            Or:
                - Class2
                - Class3

# to test the functioning of `EquivalentTo`
- multiple_owl_classes:
    - Class8a:
        SubClassOf: Class1
        EquivalentTo:
            Or:
                - has_demo_function_value:
                    value: 801
                - has_demo_function_value:
                    value: 802
    - Class8b:
        SubClassOf: Class1
        EquivalentTo:
            And:
                - has_demo_function_value:
                    value: 801
                - has_demo_function_value:
                    value: 802
    - Class8b2:
        SubClassOf: Class1
        EquivalentTo:
            Or:
                - has_demo_function_value:
                    value: 801
                - has_demo_function_value:
                    value: 802
    - Class8c:
        SubClassOf: Class1
        EquivalentTo:
            # use only one condition
            has_demo_function_value:
                value: 802
    - Class8d:
        SubClassOf: Class1
        EquivalentTo:
            # note that this is neither `And` nor `Or`. Its a list of equivalece-statements
            - has_demo_function_value:
                value: 804
            - has_demo_function_value:
                value: 805


- owl_multiple_individuals:
      names:
          - instance1
          - instance2
          - instance3
          - instance4
          - instance5
      types:
          - Class1

- property_facts:
    has_demo_function_value:
        Facts:
            - instance1:
                - 801
                - 802
            - instance2:
                - 801
                - 0
            - instance3:
                - 300
                - 150
                - 0
            - instance4:
                - 804
            - instance5: 805

# to test the functioning of `SubclassOf`
- multiple_owl_classes:
    - Class9a:
        SubClassOf:
        # this makes this class a subclass of Class1 due to the domain of `has_demo_function_value`
        # (after reasoning of course)
            Or:
                - has_demo_function_value:
                    value: 901
                - has_demo_function_value:
                    value: 902

# to test the functioning of `restriction` and `axiom_equivalent_to`
- multiple_owl_classes:
      - Class10a:
            SubClassOf: Class1
      - Class10b:
            SubClassOf: Class1
      - Class10c:
            SubClassOf: Class1
      - Class10d:
            SubClassOf: Class1
      - Class10e:
            SubClassOf: Class1
      - Class10f:
            SubClassOf: Class1

- restriction:
    # note: this makes this class a subclass of Class4 due to the domain of the property
    Subject: Class10a
    Body:
        has_demo_property_value:
            some: Class2

- axiom_equivalent_to:
    Subject: Class10b
    Body:
        has_demo_property_value2:
            some: Class2

- axiom_equivalent_to:
    Subject: Class10c
    Body:
        Class10d

- axiom_equivalent_to:
    Subject: Class10d
    Body:
        - Class10e
        - Class10f

- multiple_owl_classes:
      - Class11a:
            SubClassOf: Class1
      - Class11b:
            SubClassOf: Class1

- restriction:
    # note: this makes this class a subclass of Class4 due to the domain of the property
    Subject: Class11b
    Body:
        SubClassOf: Class11a